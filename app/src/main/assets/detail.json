{
  "err_no": 0,
  "err_msg": "success",
  "data": {
    "article_id": "6914943416128241678",
    "article_info": {
      "article_id": "6914943416128241678",
      "user_id": "1556564196985629",
      "category_id": "6809635626879549454",
      "tag_ids": [
        6809640400832167949
      ],
      "visible_level": 0,
      "link_url": "",
      "cover_image": "",
      "is_gfw": 0,
      "title": "Android购物车效果实现(RecyclerView悬浮头部实现)",
      "brief_content": "1. 数据项格式 2. 左侧列表适配器 思路： 看到右侧布局，你可能第一眼想到多布局，确实多布局可以实现，但是，如果想要吸顶的动画效果，实现起来比较麻烦，你可以参考Android 美团购物车效果这篇文章的实现方法，它会默认显示一个布局来实现吸顶，然后通过动画来实现效果。 对于右…",
      "is_english": 0,
      "is_original": 1,
      "user_index": 8.475875485046735,
      "original_type": 0,
      "original_author": "",
      "content": "",
      "ctime": "1610010819",
      "mtime": "1610012173",
      "rtime": "1610012173",
      "draft_id": "6914943366417350664",
      "view_count": 472,
      "collect_count": 0,
      "digg_count": 11,
      "comment_count": 1,
      "hot_index": 35,
      "is_hot": 0,
      "rank_index": 0.58496095,
      "status": 2,
      "verify_status": 1,
      "audit_status": 2,
      "mark_content": "\n\u003e 刚开始看购物车效果觉得挺复杂，但是把这个功能拆开来一步一步实现会发现并不难，其实就涉及到：ItemDecoration的绘制、recyclerview的滑动监听、贝塞尔曲线和属性动画相关内容，剩下的就是RecyclerView滑动和点击时左右两个列表联动的相关逻辑。\n\u003e\n\u003e 复杂的东西拆开来看就简单多了，下面我将一步一步带你来实现购物车效果。\n\n# 效果图\n\n\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7216a52e769646b9a36d2b0a12e2b8a2~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"购物车效果图\" width=\"50%\" height=“30%” /\u003e\n\n\n\n# 实现步骤\n\n## 1. 数据项格式\n\n```kotlin\nopen class ProductItemParent {\n    //记录当前类所选的商品数量\n    var typeSelectCount:Int=0\n}\n```\n\n我们用ProductItem记录左侧的分类，Product记录右侧的产品\n\n```kotlin\n//总体分类\ndata class ProductItem (\n    var productList: List\u003cProduct\u003e,\n    //类别ID\n    var typeId: String,\n    //类别名称\n    var typeName: String\n):ProductItemParent()\n\n//该分类中的某个产品\ndata class Product(\n    //所属类别ID\n    var parentId: String,\n    //产品ID\n    var productId: String,\n    //产品图片\n    var productImg: Int,\n    //产品价格\n    var productMoney: Double,\n    //产品月销售量\n    var productMonthSale: Int,\n    //产品名称\n    var productName: String\n)\n```\n\n## 2. 左侧列表适配器\n\n要实现效果：左侧列表的点击事件，点击选中时显示红线，背景变色；显示数量\n\n**思路：**\n\n* 左侧列表商品数量的数字角标我们使用TextView通过其背景显示红色圆圈shape而表示，其显示与隐藏通过判断ProductItem中的typeSelectCount字段是否\u003e0来设置，数字角标的值设为typeSelectCount\n* 选中与未选中左侧列表，我们使用selector来更改ItemView的背景颜色\n* 选中与未选中左侧列表的红色线，我们通过更改visibility属性来控制\n\n### 2.1 itemView布局\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/left_menu_item\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@drawable/selector_item_select\"\n    android:clickable=\"true\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\"\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"43dp\"\u003e\n\n        \u003cTextView\n            android:id=\"@+id/left_menu_textview\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_centerInParent=\"true\"\n            android:text=\"零食\"\n            android:textColor=\"#333333\"\n            android:textSize=\"12dp\" /\u003e\n\n        \u003c!--数字角标--\u003e\n        \u003cTextView\n            android:id=\"@+id/tv_left_menu_count\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignTop=\"@+id/iv_shopping_cart_img\"\n            android:layout_alignRight=\"@+id/left_menu_textview\"\n            android:layout_marginRight=\"-8dp\"\n            android:background=\"@drawable/shape_shopping_cart_num_bg\"\n            android:gravity=\"center\"\n            android:padding=\"2dp\"\n            android:text=\"0\"\n            android:textColor=\"#FFFFFF\"\n            android:textSize=\"8dp\"\n            android:visibility=\"invisible\" /\u003e\n\n        \u003c!--左侧竖线区域,选中展示--\u003e\n        \u003cView\n            android:id=\"@+id/v_left_menu_item_line\"\n            android:layout_width=\"3dp\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginTop=\"12dp\"\n            android:background=\"#fe3939\"\n            android:layout_marginBottom=\"12dp\" /\u003e\n\n    \u003c/RelativeLayout\u003e\n\n\n\u003c/LinearLayout\u003e\n```\n\n### 2.2 LeftTypeAdapter\n\n左侧列表适配器\n\n```kotlin\nclass LeftTypeAdapter(private var dataList: MutableList\u003cProductItem\u003e) : RecyclerView.Adapter\u003cLeftTypeAdapter.MyLeftViewHolder\u003e() {\n\n    companion object{\n        const val TAG = \"ceshi_left\"\n    }\n    \n    //默认选中的位置\n    var selectPosition = 0\n\n    //要更新的左侧分类的typeId号\n    var mUpdateTypeId=\"\"\n    //要更新的typeId号的数量\n    var mUpdateTypeCount =0\n   \n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): LeftTypeAdapter.MyLeftViewHolder {\n        var view = LayoutInflater.from(parent.context).inflate(R.layout.left_item,parent,false)\n        return MyLeftViewHolder(view)\n    }\n\n    override fun getItemCount(): Int {\n        return dataList.size\n    }\n\n    override fun onBindViewHolder(holder: LeftTypeAdapter.MyLeftViewHolder, position: Int) {\n        var productItem = dataList[position]\n        //设置分类名\n        holder.typeName.text = productItem.typeName\n\n        //是选中位置,小红线显示\n        if(selectPosition==position){\n            holder.typeLine.visibility = View.VISIBLE\n            //布局设置为选中，主要是为了更新itemView选中后的背景颜色(背景使用了selector)\n            holder.typeLayout.isSelected = true\n        }else{\n            //不是选中位置，则小红线隐藏\n            holder.typeLine.visibility = View.INVISIBLE\n            //布局设置为未选中\n            holder.typeLayout.isSelected = false\n        }\n\n        //设置数量(要更新的类别的产品数量，将productItem类内typeSelectCount数量进行更新)\n        if(productItem.typeId==mUpdateTypeId){\n            productItem.typeSelectCount = mUpdateTypeCount\n        }\n        //设置数量显示\n        if(productItem.typeSelectCount\u003e0){\n            holder.typeSelectCount.visibility = View.VISIBLE\n            holder.typeSelectCount.text = productItem.typeSelectCount.toString()\n        }else{\n            holder.typeSelectCount.visibility = View.INVISIBLE\n        }\n\n        //左侧布局的点击事件\n        holder.typeLayout.setOnClickListener {\n            if(holder.adapterPosition in 0 until itemCount){\n                this.selectPosition = holder.adapterPosition\n                //这个就实现了selected的更新了\n                notifyDataSetChanged()\n            } \n        }\n    }\n\n    inner class MyLeftViewHolder(view: View):RecyclerView.ViewHolder(view){\n\n        //名称\n        val typeName = view.findViewById\u003cTextView\u003e(R.id.left_menu_textview)\n        //已选中的数量\n        val typeSelectCount = view.findViewById\u003cTextView\u003e(R.id.tv_left_menu_count)\n        //左侧布局(为了更改背景颜色)\n        val typeLayout = view.findViewById\u003cLinearLayout\u003e(R.id.left_menu_item)\n        //左侧选中时的线条\n        val typeLine = view.findViewById\u003cView\u003e(R.id.v_left_menu_item_line)\n\n    }\n}\n```\n\n### 2.3 添加数据显示\n\n```kotlin\nvar data = mutableListOf\u003cProductItem\u003e()\nlateinit var leftAdapter: LeftTypeAdapter\noverride fun onCreate(savedInstanceState: Bundle?) {\n    initData()\n    leftAdapter = LeftTypeAdapter(data)\n    left_menu.layoutManager = LinearLayoutManager(this)\n    left_menu.adapter = leftAdapter\n}\n/**\n     * 初始化数据\n     */\nprivate fun initData() {\n    var productItem1List = mutableListOf\u003cProduct\u003e()\n    productItem1List.add(Product(\"1\", \"1\", R.drawable.ic1, 3.5, 21, \"威龙大面筋65g\"))\n    productItem1List.add(Product(\"1\", \"2\", R.drawable.ic2, 5.9, 22, \"恰恰焦糖化子108g\"))\n    var productItem2List = mutableListOf\u003cProduct\u003e()\n    var productItem2 = ProductItem(productItem2List, \"2\", \"新鲜水果\")\n\tproductItem2List.add(Product(\"2\", \"6\", R.drawable.ic6, 39.9, 30, \"盒装草莓约250g\"))\n    productItem2List.add(Product(\"2\", \"7\", R.drawable.ic7, 4.98, 31, \"砂糖桔500g\"))\n    ......\n}\n```\n\n### 2.5 效果\n\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5146da8512a74431a26f760609f9c5bc~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"左侧列表数据展示\" width=\"50%\" height=“30%” /\u003e\n\n## 3.右侧列表适配器\n\n下面我们分步骤来实现\n\n### 3.1 数据绑定展示\n\n**思路：** 看到右侧布局，你可能第一眼想到多布局，确实多布局可以实现，但是，如果想要吸顶的动画效果，实现起来比较麻烦，你可以参考[Android 美团购物车效果](https://www.jianshu.com/p/e4e0c8302563)这篇文章的实现方法，它会默认显示一个布局来实现吸顶，然后通过动画来实现效果。\n\n\n\n对于右侧适配器绑定的数据，我原先绑定的是集合`MutableList\u003cProductItem\u003e`，`getItemCount()`返回的是里面的子项Product的个数，虽然可以，但是每次在`onBindViewHolder()`里设置数据时，都要先根据position来计算获取它在ProductItem集合里面的Product对象，然后才设置数据，倒不如我们先提前将右侧Product的数据集合`MutableList\u003cProduct\u003e`先获取到，然后再绑定数据，这样我们用的时候就不需要这么麻烦了。\n\n```kotlin\nclass RightProductAdapter(private var dataList: MutableList\u003cProduct\u003e) :\nRecyclerView.Adapter\u003cRecyclerView.ViewHolder\u003e() {\n    /**\n     * 产品的ViewHolder\n     */\n    inner class MyRightProductViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        //产品名称\n        var productName = view.findViewById\u003cTextView\u003e(R.id.tv_item_life_product_name)\n\n        //产品月售个数\n        var productSaleCount = view.findViewById\u003cTextView\u003e(R.id.tv_item_life_product_monty)\n\n        //产品价格\n        var productPrice = view.findViewById\u003cTextView\u003e(R.id.tv_item_life_product_money)\n\n        //添加到购物车的数量\n        var selectCount = view.findViewById\u003cTextView\u003e(R.id.tv_group_list_item_count_num)\n\n        //减\n        var reduce = view.findViewById\u003cImageView\u003e(R.id.iv_group_list_item_count_reduce)\n\n        //加\n        var add = view.findViewById\u003cImageView\u003e(R.id.iv_group_list_item_count_add)\n\t\t\n        //图片\n        var image = view.findViewById\u003cImageView\u003e(R.id.iv_item)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n        var view = LayoutInflater.from(parent.context)\n        .inflate(R.layout.item_life_product_bf, parent, false)\n        return MyRightProductViewHolder(view)\n\n    }\n\n    override fun getItemCount(): Int {\n        return dataList.size\n    }\n\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n\n        //根据下标获取商品，这个position是右侧数据展示的下标\n        var product = dataList[position]\n\n        var productHolder = holder as MyRightProductViewHolder\n        //商品名称\n        productHolder.productName.text = product?.productName\n        //价格\n        productHolder.productPrice.text = product?.productMoney.toString()\n        //已售个数\n        productHolder.productSaleCount.text = product?.productMonthSale.toString()\n        //商品图片\n        productHolder.image.setImageResource(product?.productImg)\n    }\n}\n```\n\n**效果：**\n\n\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c152efe5cc8f4e8c80035c075aec175b~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"右侧列表数据项展示\" width=\"50%\" height=“30%” /\u003e\n\n\n### 3.2 绘制头部\n\n**思路：**\n\n* 通过ItemDecoration来实现头部效果\n* 如果ItemDecoration还没用过的话，可以看看我的这篇入门文章[地址](https://juejin.cn/post/6844903855335931911)\n\n#### 3.2.1 整理数据\n\n其实也是很简单，因为我们的右侧数据Product构成的集合是有类别区分的，所以我们只需要在每一组类别数据的开头绘制即可。\n\n这里我们可以将右侧数据集合所对应的typeName组成一个头部集合，内部typeName为标题名字。所以我们得到的集合就是{\"零食\",\"零食\",\"零食\",...\"新鲜水果\",\"新鲜水果\",.......}\n\n那么怎么判断该标题名字是不是该组类型数据中的第一个呢？我们将当前位置的标题与上一个位置的标题进行对比，如果相同则代表不是第一个，不同则代表是这组分类中的第一个。\n\n```kotlin\nvar titleDataList = mutableListOf\u003cString\u003e()\noverride fun onCreate(savedInstanceState: Bundle?) {\n    initTitleDataList()\n    ...\n    rightRecyclerview.addItemDecoration(MyItemDecoration(this,titleDataList))\n    ...\n}\n\n/**\n* 记录右侧每一项所对应的typeName()\n*/\nprivate fun initTitleDataList() {\n    for (i in data.indices) {\n        for (j in data[i].productList.indices) {\n            titleDataList.add(data[i].typeName)\n        }\n    }\n}\n```\n\n#### 3.2.2 头部偏移要绘制矩形的高度\n\n因为我们需要在每组的第一个itemView绘制一个矩形，所以我们在getItemOffsets()方法里偏移一定高度\n\n```kotlin\noverride fun getItemOffsets(\n    outRect: Rect,\n    view: View,\n    parent: RecyclerView,\n    state: RecyclerView.State\n) {\n    super.getItemOffsets(outRect, view, parent, state)\n    val pos = parent.getChildAdapterPosition(view)\n\n    //只有是同一组的第一个才显示悬浮栏\n    if (pos == 0 || isFirstInGroup(pos)) {\n        //距离ItemView的上方偏移topHeight高度\n        outRect.top = topHeight\n    } else {\n        outRect.top = 0\n    }\n}\n/**\n* 判断是不是组中的第一个位置\n* @param pos\n* @return\n*/\nprivate fun isFirstInGroup(pos: Int): Boolean {\n    return if (pos == 0) {\n        true\n    } else {            \n        //当前位置所对应的类型名\n        val typeName = titleDataList[pos]\n        //前一个位置所对应的类型名\n        val previewTypeName = titleDataList[pos - 1]\n        //判断前一个字符串 与 当前字符串 是否相同，相同返回true，不同返回false\n        previewTypeName != typeName\n    }\n}\n```\n\n\n\n#### 3.2.3 绘制矩形和文字\n\n\u003cspan style='color:red'\u003e先初始化各种画笔\u003c/span\u003e\n\n```kotlin\nclass MyItemDecoration(\n    context: Context,\n    private val titleDataList: List\u003cString\u003e\n) : ItemDecoration() {\n    //绘制标题文字的画笔\n    private val textPaint: TextPaint\n\n    //绘制背景颜色的画笔\n    private val paint: Paint\n\n    //想要的矩形的高度\n    private val topHeight: Int\n\n    //字体度量对象，记录我们要绘制字体的有关信息\n    private var fontMetrics: Paint.FontMetrics\n\n\n    init {\n        val res = context.resources\n        //设置悬浮栏的画笔---paint\n        paint = Paint()\n        //设置绘制背景的画笔颜色\n        if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.M) {\n            paint.color = res.getColor(R.color.bgcolor, null)\n        } else {\n            paint.color = res.getColor(R.color.bgcolor)\n        }\n\n\n        //设置悬浮栏中文本的画笔\n        textPaint = TextPaint()\n        textPaint.isAntiAlias = true\n        textPaint.textSize = DensityUtil.dip2px(context, 14f).toFloat()\n        textPaint.color = Color.DKGRAY\n        textPaint.textAlign = Paint.Align.LEFT\n        fontMetrics = Paint.FontMetrics()\n        //决定悬浮栏的高度等\n        topHeight = res.getDimensionPixelSize(R.dimen.sectioned_top)\n\n    }\n}\n```\n\n\u003cspan style='color:red'\u003e在onDraw()中绘制我们的标题框\u003c/span\u003e\n\n```kotlin\n/**\n* 针对的是每个Item\n* @param c\n* @param parent\n* @param state\n*/\noverride fun onDraw(\n    c: Canvas,\n    parent: RecyclerView,\n    state: RecyclerView.State\n) {\n    super.onDraw(c, parent, state)\n    val left = parent.paddingLeft\n    val right = parent.width - parent.paddingRight\n\n    //获取当前页面总共的Item数量(测试发现是当前页面可以显示的item数量)\n    val childCount = parent.childCount\n    for (i in 0 until childCount) {\n        val view = parent.getChildAt(i)\n        //获取当前view在总共集合中的位置\n        val position = parent.getChildAdapterPosition(view)\n        //获取当前view的分类名\n        val groupName = titleDataList[position]\n\n        //获取textPaint中的字体信息  setTextSize要在它前面\n        fontMetrics = textPaint.fontMetrics\n        //当是第一个或者是每组中的第一个时才绘制\n        if (position == 0 || isFirstInGroup(position)) {\n            //往上移动就要减\n            val top = view.top - topHeight.toFloat()\n            val bottom = view.top.toFloat()\n\n            //基线距离文字中心的距离\n            val distance =\n            (fontMetrics.bottom - fontMetrics.top) / 2 - fontMetrics.bottom\n            //基线的位置\n            val textBaseLine = (bottom + top) / 2 + distance\n            //绘制悬浮栏\n            c.drawRect(left.toFloat(), top, right.toFloat(), bottom, paint)\n            //绘制文本\n            c.drawText(groupName, left.toFloat(), textBaseLine, textPaint)\n        }\n    }\n}\n```\n\n**绘制标题框图解：**\n![绘制标题框图解](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/477425fada3d4f75a0038dfd43aaf8d4~tplv-k3u1fbpfcp-zoom-1.image)\n\n绘制标题框矩形的话，可参照该图进行理解，知道标题框的上下左右，用`drawRect()`方法即可绘制出矩形框\n\n**绘制文字图解：**\n ![在这里插入图片描述](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87506f8cfbc64e2597d9ac3a1bb85d4e~tplv-k3u1fbpfcp-zoom-1.image)\n\n\n绘制标题文字，有一个难点是怎么将文字居中显示，我们要知道绘制文本的时候，是根据baseline基线来绘制的。具体解析可按照如图序号顺序来理解。可参考这篇文章[链接地址](https://davis.blog.csdn.net/article/details/95341444?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-2.control\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-2.control)\n\n我们在上面绘制的矩形框的中心点Y轴坐标为：`(bottom+top)/2`\t**注意：** 这里的bottom和top是包含正负的\n\n基线距离文字中心的距离(这里指距离，代表为正)：`distance=(fontMetrics.bottom - fontMetrics.top) / 2 - fontMetrics.bottom`\n\n所以文字的中心Y轴坐标为：`baseline-distance`(因为baseline对应的Y轴位置为0，向上为负)\n\n要让文字的中心和矩形框的中心一致，即`baseline-distance=(bottom+top)/2`\n\n所以最终baseline的位置为：`(bottom+top)/2+distance`\n\n### 3.3 效果\n\n\n\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24e5584d65824b1e94825fe71a2c55cb~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"右侧列表头部绘制\" width=\"50%\" height=\"30%\" /\u003e\n\n## 4. 悬浮头部(有动画)\n\n使用`onDrawOver()`方法， `onDrawOver()`是在RecyclerView绘制完内容之后再调用，相当于可以在RecyclerView之上再绘制一层内容。 \n\n因为我们在移动的时候，只有当下一个分组绘制的标题栏顶上来的时候，我们的悬浮头部才会发生动画，慢慢的顶上去并消失，这里其实就是不断改变悬浮头部的高度，让其变小，从而实现我们想要的效果。\n\n**图解：**\n\n![在这里插入图片描述](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33d0120016504e8b9fe74f0e0d33d696~tplv-k3u1fbpfcp-zoom-1.image)\n\n\n具体解析可看图所示，其实和前面onDraw()中的绘制矩形和文字一样，不同的只是top和bottom的位置不同，\n\n绘制矩形所需要的参数top和bottom如图解释，绘制字体同理。\n\n```kotlin\noverride fun onDrawOver(c: Canvas, parent: RecyclerView, state: RecyclerView.State) {\n    super.onDrawOver(c, parent, state)\n      \tval left = parent.paddingLeft\n        val right = parent.width - parent.paddingRight\n        //当前布局的名字\n        var groupTitleName =\"\"\n        //因为我们只需要在当前界面可显示的第一条数据上方绘制，所以这个就getChildAt(0)\n        val itemView = parent.getChildAt(0)\n        val position = parent.getChildAdapterPosition(itemView)\n        //获取该位置的标题名称\n        groupTitleName = titleDataList[position].toUpperCase()\n    \n        //绘制悬浮标题栏在该布局\n        //默认是指定的高度\n        var viewTitleHeight: Float = topHeight.toFloat()\n        //获取当前itemView的底部\n        val viewBottom = itemView.bottom\n\n        //-------这里实现了上升和下拉平滑的效果--------\n        //下一个item的标题名字\n        val nextGroupTitleName: String = titleDataList[position + 1]\n        //下一个item的名字和顶部0位置的标题名字不同，说明要更换新的标题了（viewBottom\u003cviewTitleHeight,\n        // 说明itemView向上移动，此时要绘制的标题的高度其实就是顶部下标为0的itemView的bottom的距离，因为recyclerview最上面是0坐标）\n        if (nextGroupTitleName !== groupTitleName \u0026\u0026 viewBottom \u003c viewTitleHeight) {\n            //所以此时的高度，就为剩下的itemView距离0点的高度了，因为是动态变化的，所有就有了效果\n            viewTitleHeight = viewBottom.toFloat()\n        }\n\n        //获取paint中的字体信息  settextSize要在他前面\n        val fontMetrics = textPaint.fontMetrics\n        //基线距离文字中心的距离\n        val distance = (fontMetrics.bottom - fontMetrics.top) / 2 - fontMetrics.bottom\n        //因为按道理一直在第一项，所以高应该为0，但是这么写相当于固定了头部，因为要有动画效果，所以可能变化，这里的top和bottom都要发生变化\n        c.drawRect(left.toFloat(), viewTitleHeight - topHeight, right.toFloat(), viewTitleHeight, paint)\n\n        //绘制文字\n        c.drawText(groupTitleName, left.toFloat(), 2 * viewTitleHeight - topHeight - distance, textPaint)\n}\n```\n\n### 4.1 效果\n\n\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0db63a7ed0d840b388db893a05c322b9~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"右侧悬浮框绘制\" width=\"50%\" height=\"30%\" /\u003e\n\n## 5. 左右联动\n\n* 点击左侧右侧滑动\n* 滑动右侧左侧变化\n* 点击加减号左侧数字角标变化\n\n### 5.1 点击左侧列表联动滑动右侧\n\n首先在LeftTypeAdapter内设置监听器来进行接口回调\n\n```kotlin\n/**\n* 接口回调\n*/\ninterface  LeftTypeClickListener{\n    //点击布局\n    fun onItemClick(position: Int)\n}\noverride fun onBindViewHolder(holder: LeftTypeAdapter.MyLeftViewHolder, position: Int) {\n    ......\n     holder.typeLayout.setOnClickListener {\n           ...\n           //写个接口回调来滑动右侧recyclerview布局\n\t\t   leftTypeClickListener?.onItemClick(position)\n        }\n}\n\n```\n\n然后在MainActivity里进行监听\n\n```kotlin\nleftAdapter.setLeftTypeClickListener(this)\n/**\n* 左侧列表的点击事件\n*/\noverride fun onItemClick(position: Int) {\n    leftClickType = true\n\n    //计算右侧所对应的组数据，然后得到该组内的第一条数据所在的位置\n    var sum = 0\n    for (i in 0 until position) {\n        sum += data[i].productList.size\n    }\n    var layoutManager = rightRecyclerview.layoutManager as LinearLayoutManager\n   \n    //将该item移动到第一项\n    layoutManager.scrollToPositionWithOffset(sum, 0)\n    Log.i(TAG, \"onItemClick: 左侧点击右侧联动\")\n\n}\n```\n\n这里，当我们点击左侧列表时，先通过计算，得到该分类在右侧所对应的组，然后得到该组内的第一项数据在右侧列表内所对应的位置。\n\n然后通过`scrollToPositionWithOffset()`方法来将该条数据移动到顶部。\n\n这里使用`scrollToPositionWithOffset()`而不是`scrollToPosition()`，因为`scrollToPositionWithOffset()` 会把 Item 移动到可见 Item 的第一项，即使它已经在可见 Item 之中。 而\n\n`scrollToPosition`只会把不在屏幕的 Item 移动到屏幕上，原来在RecyclerView上方没显示的 Item 移动到可见 Item 的第一项，在RecyclerView下方没显示的移动到屏幕可见 Item 的最后一项。已经显示的 Item 不会移动。\n\n\n\n**效果：**\n\n\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e222992572b42e9b033c26079467b9a~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"点击左侧右侧跟着联动\" width=\"50%\" height=\"30%\" /\u003e\n\n### 5.2 滑动右侧列表带动左侧列表滑动\n\n主要是为右侧列表添加滑动监听器进行监听\n\n* 当右侧列表滑动到底部时，左侧列表直接选中最后一项并更新视图\n\n* 当是因为点击左侧列表联动的滑动右侧列表时，右侧列表不做处理，这里用leftClickType字段判断\n\n* 当主动滑动右侧列表时，我们找到右侧列表中的第一项，并判断该对象所对应左侧列表的分类，然后将该分类设置为选中状态即可\n\n具体内容如下述代码所示\n\n```kotlin\n//右侧菜单滑动联动左侧菜单选择\nright_menu.addOnScrollListener(object : RecyclerView.OnScrollListener() {\n\n    override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\n        super.onScrollStateChanged(recyclerView, newState)\n    }\n\n    override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\n        super.onScrolled(recyclerView, dx, dy)\n        //当无法上滑时，即右侧列表滑动到底部时，移动左侧列表到最后一项,将左侧的最后一项Item变为选中状态\n        if (!recyclerView.canScrollVertically(1)) {\n            leftAdapter.setSelectedNum(data.size - 1)\n\n        }else{\n            //当右侧主动滑动时，才联动左侧列表；左侧列表带动的右侧列表滑动时，不再返回来联动左侧列表\n            if (leftClickType) {\n                leftClickType = false\n            } else {\n                //当右侧列表滑动时，获取右侧列表的第一条数据，找其所对应的左侧列表的Title对象即：productItem\n                var position =\n                (right_menu.layoutManager as LinearLayoutManager).findFirstVisibleItemPosition()\n\n                var productItem = getTitleByPosition(position, data)\n                //找到该productItem在左侧列表对应的position\n                for (i in data.indices) {\n                    if (data[i] === productItem) {\n                        //左侧列表适配器设置选中项并进行更新\n                        leftAdapter.setSelectedNum(i)\n                        break\n                    }\n                }\n            }\n        }\n    }\n})\n```\n\n```kotlin\n/**\n* 根据position位置来获取相应的标题Bean !!!(用于滑动右侧时联动左侧)\n*/\nfun getTitleByPosition(_position: Int, dataList: MutableList\u003cProductItem\u003e): ProductItem? {\n    var sum = 0\n    for (productItem in dataList) {\n        sum += productItem.productList.size\n        if (_position \u003c sum) {\n            return productItem\n        }\n    }\n    return null\n}\n```\n\n```kotlin\nclass LeftTypeAdapter(private var dataList: MutableList\u003cProductItem\u003e) :\nRecyclerView.Adapter\u003cLeftTypeAdapter.MyLeftViewHolder\u003e() {\n\t......\n    /**\n     * 选中左侧区域，主要用于滑动右侧时需要联动左侧列表\n     */\n    fun setSelectedNum(selectedNum: Int) {\n        if (selectedNum in 0 until itemCount) {\n            selectPosition = selectedNum\n            notifyDataSetChanged()\n        }\n    }\n\t......\n}\n```\n\n**效果**\n\n\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9dd2e81e6e0417c807d6a373f700bd6~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"滑动右侧列表，左侧列表跟着联动\" width=\"50%\" height=\"30%\" /\u003e\n\n### 5.3 点击右侧加减号，左侧列表数值变化\n\n#### 5.3.1这里我们定义一个购物车类，用来记录添加的商品的数量，即记录某类商品的总数量\n\n```kotlin\nclass ShopCart {\n    //总共的商品数量\n    var totalAmount:Int = 0\n    //总共的商品价格\n    var totalPrice:BigDecimal = BigDecimal.valueOf(0.0)\n    //保存各个产品添加的数量，将产品作为key，因为每个产品都不一样\n    val productNumMap: MutableMap\u003cProduct, Int\u003e = mutableMapOf()\n    //保存同类产品的数量\n    val typeCountMap:MutableMap\u003cString,Int\u003e = mutableMapOf()\n\n\n    //商品数量添加\n    fun addProductNum(product: Product){\n\n        //该商品数量+1\n        if(productNumMap.containsKey(product)){\n            productNumMap[product] = productNumMap[product]!!+1\n        }else{\n            productNumMap[product] = 1\n        }\n\n        //该商品所在类别数量+1\n        //虽然是第一次添加商品，但对于parentId来说，第一次添加的商品这个所属的类的数量可能为0\n        if(typeCountMap.containsKey(product.parentId)){\n            typeCountMap[product.parentId] = typeCountMap[product.parentId]!!+1\n        }else{\n            typeCountMap[product.parentId] = 1\n        }\n\n        //总体数量+1\n        totalAmount += 1\n        //总体价格\n        totalPrice = totalPrice.add(BigDecimal.valueOf(product.productMoney))\n\n    }\n\n    //商品数量减少\n    fun reduceProductNum(product: Product){\n        //该商品数量-1\n        productNumMap[product] = productNumMap[product]!!-1\n        //该商品所在的类别数量-1\n        typeCountMap[product.parentId] = typeCountMap[product.parentId]!!-1\n\n        //总体数量-1\n        totalAmount -= 1\n        //总体价格\n        totalPrice = totalPrice.subtract(BigDecimal.valueOf(product.productMoney))\n    }\n}\n```\n\n#### 5.3.2 右侧列表适配器增加item内的加减号点击事件\n\n* 在`onBindViewHolder()`方法里，我们根据传来的shopCart实例来根据当前商品的数量来动态的更改右侧列表加减号中间的数字。\n\n* 为加减号增加点击事件，当点击的时候更改shopCart内该商品的数量，并更新该RecyclerView，来实现右侧列表加减号中间的数字更新，同时这里通过shopCartListener来调用`onReduce()`和`onAdd()`方法，目的是来更改左侧列表的商品类别数量\n\n```kotlin\nclass RightProductAdapter(private var dataList: MutableList\u003cProduct\u003e,private var shopCart: ShopCart) :\nRecyclerView.Adapter\u003cRecyclerView.ViewHolder\u003e() {\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n        //已下单的个数显示与隐藏\n        if (shopCart.productNumMap.containsKey(product)) {\n            if (shopCart.productNumMap[product]!! \u003e 0) {\n                //数量不为零\n                productHolder.selectCount.text = shopCart.productNumMap[product].toString()\n                productHolder.selectCount.visibility = View.VISIBLE\n                productHolder.reduce.visibility = View.VISIBLE\n            } else {\n                //数量为0不显示\n                productHolder.selectCount.visibility = View.INVISIBLE\n                productHolder.reduce.visibility = View.INVISIBLE\n            }\n        } else {\n            productHolder.selectCount.visibility = View.INVISIBLE\n            productHolder.reduce.visibility = View.INVISIBLE\n        }\n\n        //增加商品\n        productHolder.add.setOnClickListener {\n\n            product?.let { it1-\u003e\n                shopCart.addProductNum(it1)\n                notifyItemChanged(position)\n                shopCartListener?.onAdd(\n                    it,\n                    product.parentId,\n                    shopCart.typeCountMap[product.parentId]!!\n                )\n            }\n        }\n        //减少商品\n        productHolder.reduce.setOnClickListener {\n            product?.let {it1-\u003e\n                shopCart.reduceProductNum(it1)\n                notifyItemChanged(position)\n                shopCartListener?.onReduce(\n                    product.parentId,\n                    shopCart.typeCountMap[product.parentId]!!\n                )\n            }\n        }\n\n    }\n\t......\n\n}\n```\n\n```kotlin\ninterface ShopCartListener {\n\n    fun onReduce(parentId:String, parentCount:Int)\n\n    fun onAdd(view: View, parentId: String, parentCount: Int)\n}\n/**\n     * 设置监听器\n     */\nfun setShopCartListener(_shopCartListener: ShopCartListener) {\n    shopCartListener = _shopCartListener\n}\n```\n\n#### 5.3.3 左侧列表类别数量更改\n\n再回调来更改购物车中的产品数量\n\n```kotlin\nclass MainActivity : AppCompatActivity(),\nLeftTypeAdapter.LeftTypeClickListener, RightProductAdapter.ShopCartListener {\n    //购物车实体类\n    private var shopCart = ShopCart()\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        ....\n        rightAdapter = RightProductAdapter(productDataList,shopCart)\n        rightAdapter.setShopCartListener(this)\n    }\n    \n    /**\n     * 减少\n     */\n    override fun onReduce(parentId: String, parentCount: Int) {\n        //更新左侧列表类别数量\n        leftAdapter.updateTypeCount(parentId,parentCount)\n     \n        //更新购物车的数量\n        if(shopCart.totalAmount\u003e0){\n            tv_shopping_cart_count.visibility = View.VISIBLE\n            tv_shopping_cart_count.text = shopCart.totalAmount.toString()\n        }else{\n            tv_shopping_cart_count.visibility = View.INVISIBLE\n        }\n\n        //更新购物车的价格\n        tv_shopping_cart_money.text = shopCart.totalPrice.toString()\n    }\n\n    /**\n     * 增加\n     */\n    override fun onAdd(view: View, parentId: String, parentCount: Int) {\n        //更新左侧列表类别数量\n        leftAdapter.updateTypeCount(parentId,parentCount)        \n        //更新购物车的数量\n        if(shopCart.totalAmount\u003e0){\n            tv_shopping_cart_count.visibility = View.VISIBLE\n            tv_shopping_cart_count.text = shopCart.totalAmount.toString()\n        }else{\n            tv_shopping_cart_count.visibility = View.INVISIBLE\n        }\n\n        //更新购物车的价格\n        tv_shopping_cart_money.text = shopCart.totalPrice.toString()\n    }\n}\n```\n\n```kotlin\nclass LeftTypeAdapter(private var dataList: MutableList\u003cProductItem\u003e) :\nRecyclerView.Adapter\u003cLeftTypeAdapter.MyLeftViewHolder\u003e() {\n    //要更新的ID号\n    var mUpdateTypeId = \"\"\n\n    //要更新的ID号的数量\n    var mUpdateTypeCount = 0\n\n    /**\n     * 更新左侧列表角标(用于右侧添加或减少商品时它数量的更新)\n     */\n    fun updateTypeCount(parentId:String,parentCount:Int){\n\n        mUpdateTypeId = parentId\n        mUpdateTypeCount = parentCount\n        notifyDataSetChanged()\n\n    }\n}\n```\n\n#### 5.3.4 效果\n\n\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/189c0e9914dc4755af070a0880a1af4c~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"点击加号更新列表数据\" width=\"50%\" height=\"30%\" /\u003e\n\n## 6. 添加数据效果\n\n主要用到了二阶贝塞尔曲线、属性动画、插值器\n\n* 传入控制点和终点通过`quadTo()`方法形成二阶贝塞尔曲线路径\n\n* 使用LinearInterpolator插值器来形成匀速滑动的效果\n\n* 使用valueAnimator属性动画来实现将小圆球按照二阶贝塞尔曲线路径匀速进行移动的效果\n\n具体详见[代码](https://github.com/myfittinglife/MyShoppingCarProject/blob/master/app/src/main/java/com/myfittinglife/myshoppingcarproject/MainActivity.kt)\n\n**效果：**\n\n\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/827c6ed917ae409ca199b777c97a4e76~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"贝塞尔二阶动画效果\" width=\"50%\" height=\"30%\" /\u003e\n\n\n\n\n# 总结\n\n按照以上步骤即可完成购物车的功能。刚开始没什么头目，但按照步骤，一部分一部分实现就挺简单的。\n\n其实本片内容主要参考了两篇文章：\n\n一[Android 美团购物车效果](https://www.jianshu.com/p/e4e0c8302563)，参考了它的购物车类，这个思路很好。它绘制悬浮头部的方式是xml里固定有个View，然后通过动画的方式来显示隐藏实现效果。它的右侧列表滑动到底部左侧列表最后一项不会选中。\n\n二[Android-使用RecyclerView的ItemDecoration 实现炫酷的 吸顶效果](https://blog.csdn.net/cjm2484836553/article/details/53453982?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control)它的绘制是使用itemDecoration，但是它的onDrawover()方法使用了循环判断，其实我们只需要对第一个itemView进行绘制即可。\n\n多看看别人的找到思路后学会用自己的方式进行优化才能进步。 如果本文对你有帮助，请别忘记三连，如果有不恰当的地方也请提出来，下篇文章见。 \n\n[项目Github地址](https://github.com/myfittinglife/MyShoppingCarProject)\n\n# 参考文章\n\n[Android 美团购物车效果](https://www.jianshu.com/p/e4e0c8302563)\n\n[Android-使用RecyclerView的ItemDecoration 实现炫酷的 吸顶效果](https://blog.csdn.net/cjm2484836553/article/details/53453982?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control)\n\n⭐[贝塞尔曲线](https://qijian.blog.csdn.net/article/details/50995587)\n\n⭐[插值器](https://blog.csdn.net/harvic880925/article/details/40049763?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160990159816780310120301%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D\u0026request_id=160990159816780310120301\u0026biz_id=0\u0026utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-40049763.pc_v1_rank_blog_v1\u0026utm_term=%E6%8F%92%E5%80%BC%E5%8A%A8%E7%94%BB)\n\n⭐[自定义控件三部曲之动画篇(四)——ValueAnimator基本使用](https://blog.csdn.net/harvic880925/article/details/50525521?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160990195916780271521038%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D\u0026request_id=160990195916780271521038\u0026biz_id=0\u0026utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-50525521.pc_v1_rank_blog_v1\u0026utm_term=valueAnimator)\n\n[Android Path测量工具：PathMeasure](https://www.jianshu.com/p/82afb9c2e959)\n\n[BIgDecimal()和BigInteger()运算](https://cloud.tencent.com/developer/article/1746847)\n\n[recycleview获取第一个和最后一个可见item的位置](https://blog.csdn.net/salute_li/article/details/52118504)\n\n[Android Canvas的drawText()和文字居中方案](https://davis.blog.csdn.net/article/details/95341444?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-2.control\u0026depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-2.control)"
    },
    "author_user_info": {
      "user_id": "1556564196985629",
      "user_name": "重拾丢却的梦",
      "company": "",
      "job_title": "Android开发",
      "avatar_large": "https://mirror-gold-cdn.xitu.io/1694c97d4daf740eaed",
      "level": 2,
      "description": "星星一枚，努力分享充电中",
      "followee_count": 17,
      "follower_count": 37,
      "post_article_count": 13,
      "digg_article_count": 16,
      "got_digg_count": 145,
      "got_view_count": 24444,
      "post_shortmsg_count": 0,
      "digg_shortmsg_count": 0,
      "isfollowed": false,
      "favorable_author": 0,
      "power": 389,
      "study_point": 0,
      "university": {
        "university_id": "0",
        "name": "",
        "logo": ""
      },
      "major": {
        "major_id": "0",
        "parent_id": "0",
        "name": ""
      },
      "student_status": 0,
      "select_event_count": 0,
      "select_online_course_count": 0,
      "identity": 0
    },
    "category": {
      "category_id": "6809635626879549454",
      "category_name": "Android",
      "category_url": "android",
      "rank": 3,
      "ctime": 1461266353,
      "mtime": 1432503184,
      "show_type": 3
    },
    "tags": [
      {
        "id": 2546521,
        "tag_id": "6809640400832167949",
        "tag_name": "Android",
        "color": "#A3CC28",
        "icon": "https://lc-gold-cdn.xitu.io/7bab0e1e66ea386e6f94.png",
        "back_ground": "",
        "show_navi": 1,
        "tag_alias": "",
        "post_article_count": 34186,
        "concern_user_count": 246522
      }
    ],
    "user_interact": {
      "id": 6914943416128241678,
      "omitempty": 2,
      "user_id": 2277843825068702,
      "is_digg": false,
      "is_follow": false,
      "is_collect": false
    }
  }
}